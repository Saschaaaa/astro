---
// import of components and layout
import Ratings from '../components/Ratings.astro';
import Layout from '../layouts/Layout.astro';


// API-Requests

// Search for Movie details via TMDB API
// get search param from url
const movie_id = Astro.url.searchParams.get('id')! || '';
const response = await fetch('https://api.themoviedb.org/3/movie/' + movie_id + '?api_key='+ import.meta.env.TMDB_API_KEY + '&language=en')
const res = await response.json();

// get detailed rating via OMDB API and the IMDB-ID from the first api
let resp;
let results2;
if(res.imdb_id != null){
	// we use a second api to get detailed rating which are not included in the first api
	resp = await fetch('http://www.omdbapi.com/?i='+ res.imdb_id + '&apikey=' + import.meta.env.OMDB_API_KEY);
 	results2 = await resp.json();
}	else	{
	results2 = null;
}

// get params for back button
const prev_page = Astro.url.searchParams.get('prev_page')! || '';
const cur = Astro.url.searchParams.get('cur')! || '';

// prepare received data for rendering and format if necessary

// set up image url and cover no image case
// image stuff
const no_img = `${Astro.url.protocol}//${Astro.url.host}/images/no-image.svg.png`
const baseurl = "https://image.tmdb.org/t/p/w500"
// check which img to use
let fullimg;
if ( res.poster_path != null){
	fullimg = baseurl + res.poster_path
} else if ( res.backdrop_path != null){
	fullimg = baseurl + res.backdrop_path
} else {
	fullimg = no_img	
}


// cut of the release year from the date
const release_year = res.release_date.substring(0,4);

// format date to display the full date in the format dd.mm.yyyy
function formatDate (input:any) {
	if (input == "") return "N/A";
	var datePart = input.match(/\d+/g),
	year = datePart[0].substring(0),
	month = datePart[1], day = datePart[2];
	return day + '.' + month + '.' + year;
}

// format money for budget and revenue
function formatMoney(number:any) {
	if (number == 0 || number == null) return "N/A";
	return number.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
}

// Production Companies list comma separated
let prod_companies = "";
if (res.production_companies != null && res.production_companies.length > 0){
	for (let i = 0; i < res.production_companies.length; i++) {
		prod_companies += res.production_companies[i].name;
		if (i != res.production_companies.length-1) {
			prod_companies += ", ";
		}
	}
} else {
	prod_companies = "N/A";
}

// runtime
let runtime = res.runtime != null && res.runtime != 0 ? res.runtime + " min" : "N/A";

---

<Layout title="Just another MovieDB">
	<main>

		<h1 class="text-center"><span class="text-gradient">Just another MovieDB</span></h1>

		<form id="form1" action="/" method="get">
			<button name="search" value={prev_page} name="test2" value="test" class="inline-flex items-center px-4 py-2 bg-indigo-500
			 hover:bg-indigo-600 text-white text-sm font-medium rounded-md mx-1 mt-10">
				<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6" />
				</svg>
				Back
			</button>
			<input type="hidden" name="page" value={cur}> 
		</form> 
		
		<div class="flex flex-row space-x-8">
			<div class="instructions basis-3/4">
				
				<h2 class="text-center text-5xl pt-10">{release_year != "" ? "("+release_year+")" : ""} {res.title}</h2>
				<img class="items-center mx-auto mt-10" src={fullimg} width="200px" height="300px">
				
				<div class="pt-4">
					<h3 class="mb-2 text-xl">Overview</h3>
					{res.overview}
				</div>
				
				<br>
				<h3 class="mb-2 text-xl">Genres</h3>
				{res.genres.map((genre:any) => (
					<span class="bg-gray-100 text-gray-800 font-medium mr-2 px-2.5 py-0.5 rounded-full dark:bg-gray-700 dark:text-gray-300">{genre.name} </span>
				))}
				<div>
					popularity: {res.popularity}
					<br>
					Movie budget: {formatMoney(res.budget)}
					<br>
					Movie revenue: {formatMoney(res.revenue)}
					<br>
					Release date: {formatDate(res.release_date)}
					<br>
					Production Companies: {prod_companies}
					<br>
					runtime: {runtime}
					<br>
					status: {res.status}
				</div>

			</div>

			<div class="flex flex-col basis-1/4">	
				<div class="instructions basis-2/5">
					<Ratings ratings={ results2 != null ? results2.Ratings : null} />
				</div>
			</div>
	
		</div>

	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1.5rem;
		max-width: 120ch;
	}
	h1 {
		font-size: 4rem;
		font-weight: 800;
		margin: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 2rem;
		border-radius: 0.4rem;
	}
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
</style>
